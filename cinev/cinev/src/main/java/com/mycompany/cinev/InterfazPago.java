/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cinev;

import java.awt.Color;
import java.awt.Image;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author fband
 */
public class InterfazPago extends javax.swing.JFrame {
    
  int xMouse, yMouse;
  private String rutaImagen; 
  private Conexion conexion = new Conexion();
    Connection con = conexion.establecerConexion();
    private String nomPeli;
    private String hora;
    private int idFun;
    private String nomEm;
    private String nom;
    private String ap;
    private String fec;
    private int precio;
    private int ci;
    
    /**
     * Creates new form InterfazRegPeli
     */
    public InterfazPago(String nomPeli, String hora,int idFun,String nomEm,String nom, String ap, String fec,int precio,int ci) {
        initComponents();
        this.setLocationRelativeTo(this);
        this.nomPeli=nomPeli;
        this.hora=hora;
        this.idFun=idFun;
        this.nomEm=nomEm;
        this.nom=nom;
        this.ap=ap;
        this.fec=fec;
        this.precio=precio;
        this.ci=ci;
        int na = obtenerAsientoPorIdFuncion(idFun);
        paraAs.setText(""+na);
        paraPeli.setText(nomPeli);
        paraHora.setText(hora);
        insertarImagenPorNombrePelicula(nomPeli);
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        menu = new javax.swing.JPanel();
        prece = new javax.swing.JPanel();
        guardar = new javax.swing.JPanel();
        cerrarlbl = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        paraPeli = new javax.swing.JLabel();
        paraPeli1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        nAsientos = new javax.swing.JTextField();
        paraFoto = new javax.swing.JLabel();
        aceptarBtn = new javax.swing.JButton();
        cancelarBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        paraAs1 = new javax.swing.JLabel();
        paraAs = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        paraHora = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(11, 23, 128));
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);

        bg.setBackground(new java.awt.Color(13, 20, 58));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu.setBackground(new java.awt.Color(13, 20, 58));
        menu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        bg.add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 450));

        prece.setBackground(new java.awt.Color(13, 20, 58));
        prece.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                preceMouseDragged(evt);
            }
        });
        prece.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                preceMousePressed(evt);
            }
        });

        guardar.setBackground(new java.awt.Color(102, 0, 102));
        guardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                guardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                guardarMouseExited(evt);
            }
        });

        cerrarlbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cerrarlbl.setForeground(new java.awt.Color(255, 255, 255));
        cerrarlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cerrarlbl.setText("x");

        javax.swing.GroupLayout guardarLayout = new javax.swing.GroupLayout(guardar);
        guardar.setLayout(guardarLayout);
        guardarLayout.setHorizontalGroup(
            guardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guardarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cerrarlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        guardarLayout.setVerticalGroup(
            guardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(guardarLayout.createSequentialGroup()
                .addComponent(cerrarlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout preceLayout = new javax.swing.GroupLayout(prece);
        prece.setLayout(preceLayout);
        preceLayout.setHorizontalGroup(
            preceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preceLayout.createSequentialGroup()
                .addGap(0, 661, Short.MAX_VALUE)
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        preceLayout.setVerticalGroup(
            preceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(preceLayout.createSequentialGroup()
                .addComponent(guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bg.add(prece, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 700, 40));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Pagar Boleto");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        bg.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 40, 410, 50));

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Numero de asientos:");
        bg.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 180, 40));

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        paraPeli.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        paraPeli.setForeground(new java.awt.Color(255, 255, 255));

        paraPeli1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        paraPeli1.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paraPeli, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(paraPeli1, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paraPeli, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(paraPeli1, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        bg.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 160, 160, 40));

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Hora:");
        bg.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 210, 60, 40));

        jPanel2.setBackground(new java.awt.Color(102, 0, 102));

        nAsientos.setBackground(new java.awt.Color(102, 0, 102));
        nAsientos.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        nAsientos.setForeground(new java.awt.Color(255, 255, 255));
        nAsientos.setBorder(null);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nAsientos, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(nAsientos, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                .addContainerGap())
        );

        bg.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 250, 180, 40));

        paraFoto.setToolTipText("");
        bg.add(paraFoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 150, 190));

        aceptarBtn.setBackground(java.awt.Color.green);
        aceptarBtn.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        aceptarBtn.setForeground(java.awt.Color.white);
        aceptarBtn.setText("PAGAR");
        aceptarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarBtnActionPerformed(evt);
            }
        });
        bg.add(aceptarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 340, 170, 70));

        cancelarBtn.setBackground(java.awt.Color.red);
        cancelarBtn.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        cancelarBtn.setForeground(new java.awt.Color(255, 255, 255));
        cancelarBtn.setText("CANCELAR");
        cancelarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarBtnActionPerformed(evt);
            }
        });
        bg.add(cancelarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 340, 170, 70));

        jLabel5.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Asientos Disponibles:");
        bg.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 180, 40));

        jPanel3.setBackground(new java.awt.Color(102, 0, 102));

        paraAs.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        paraAs.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(paraAs1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paraAs, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paraAs1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(paraAs, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        bg.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 160, 40));

        jLabel6.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Pelicula");
        bg.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 180, 40));

        jPanel4.setBackground(new java.awt.Color(102, 0, 102));

        paraHora.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paraHora, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paraHora, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        bg.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 170, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseEntered
       guardar.setBackground(Color.red);
    }//GEN-LAST:event_guardarMouseEntered

    private void guardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseExited
        guardar.setBackground(new Color(102,0,102));
    }//GEN-LAST:event_guardarMouseExited

    private void preceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preceMousePressed
        xMouse=evt.getX();
        yMouse=evt.getY();
    }//GEN-LAST:event_preceMousePressed

    private void preceMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preceMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        
        this.setLocation(x-xMouse,y-yMouse);
    }//GEN-LAST:event_preceMouseDragged

    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked

        System.exit(0);    }//GEN-LAST:event_guardarMouseClicked

    private void aceptarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarBtnActionPerformed
    if(!esNumerico(nAsientos.getText())){
        JOptionPane.showMessageDialog(null, "Ingrese los datos correctamente", "Error", JOptionPane.ERROR_MESSAGE);
    }
        reducirAsientos(idFun,Integer.parseInt(nAsientos.getText()));
        int idEmp = obtenerIdEmpleadoPorUsuario(nomEm);
        insertarCliente(nom,ap,ci);
        int idC = obtenerIdCliente(nom,ap,ci);
        int monto = Integer.parseInt(nAsientos.getText());
        int total = monto*precio;
        registrarVenta(idEmp,idC,fec,total);
        generarTicketTXT(nom,ap,nomPeli,hora,monto);
        new InterfazVenta(nomEm).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_aceptarBtnActionPerformed

    private void cancelarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarBtnActionPerformed
       new InterfazVenta(nomEm).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_cancelarBtnActionPerformed
     public boolean esNumerico(String texto) {
    // Verificar si el texto es nulo o está vacío
    if (texto == null || texto.isEmpty()) {
        return false; 
    }

    // Recorrer cada carácter del texto
    for (char c : texto.toCharArray()) {
        // Si algún carácter no es un número, retorna falso
        if (!Character.isDigit(c)) {
            return false;
        }
    }

    // Si todos los caracteres son números, retorna verdadero
    return true;
}

    public boolean registrarVenta(int idEmpleado, int idCliente, String fechaHoraVenta, double montoTotal) {
    // Consulta SQL para insertar una nueva venta
    String sql = "INSERT INTO venta (id_empleado, id_cliente, fecha_hora_venta, monto_total) VALUES (?, ?, ?, ?)";

    // Verificar que la conexión no sea nula
    if (con == null) {
        JOptionPane.showMessageDialog(null, "Error: No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        // Convertir la fecha de String a formato Date (yyyy-MM-dd)
        java.sql.Date fechaSQL = java.sql.Date.valueOf(fechaHoraVenta);

        // Asignar valores a los parámetros de la consulta
        pst.setInt(1, idEmpleado);
        pst.setInt(2, idCliente);
        pst.setDate(3, fechaSQL);
        pst.setDouble(4, montoTotal);

        // Ejecutar la consulta
        int filasAfectadas = pst.executeUpdate();

        // Verificar si la inserción fue exitosa
        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(null, "Venta registrada exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo registrar la venta.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al registrar la venta: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        return false;
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(null, "Error en el formato de la fecha. Debe ser yyyy-MM-dd.", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }
}
 
  public void generarTicketTXT(String nombre, String apellido, String pelicula, String hora, int nVeces) {
    
        String userHome = System.getProperty("user.home");
        String desktopPath = Paths.get(userHome, "Desktop").toString();
        String nombreArchivo = String.format("Ticket de %s %s %d.txt", nombre, apellido, nVeces);
        String rutaCompleta = desktopPath + File.separator + nombreArchivo;

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaCompleta))) {

            writer.write("Ticket de Cine\n");
            writer.write("====================================\n");
            writer.write("Nombre: " + nombre + "\n");
            writer.write("Apellido: " + apellido + "\n");
            writer.write("Película: " + pelicula + "\n");
            writer.write("Hora: " + hora + "\n");
            writer.write("Cantidad de Tickets: " + nVeces + "\n");
            writer.write("====================================\n");
            System.out.println("Documento generado correctamente en: " + rutaCompleta);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public int obtenerIdCliente(String nombreCliente, String apellidoCliente, int ciCliente) {
    int idCliente = -1; // Valor predeterminado en caso de que no se encuentre el cliente

    // Consulta SQL para obtener el id_cliente basado en los parámetros proporcionados
    String sql = "SELECT id_cliente FROM cliente WHERE nombre_cliente = ? AND apellido_cliente = ? AND ci_cliente = ?";

    // Verificar que la conexión no sea nula
    if (con == null) {
        JOptionPane.showMessageDialog(null, "Error: No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return idCliente;
    }

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        // Asignar valores a los parámetros de la consulta
        pst.setString(1, nombreCliente);
        pst.setString(2, apellidoCliente);
        pst.setInt(3, ciCliente);

        // Ejecutar la consulta
        try (ResultSet rs = pst.executeQuery()) {
            // Si se encuentra un resultado, obtener el id_cliente
            if (rs.next()) {
                idCliente = rs.getInt("id_cliente");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un cliente con los datos proporcionados.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al obtener el id del cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    return idCliente; // Retorna el id_cliente o -1 si no se encuentra
}

    public int obtenerAsientoPorIdFuncion(int idFuncion) {
    int asientos = 0;  // Valor predeterminado en caso de que no se encuentre la función

    // Consulta SQL para obtener el número de asientos para el id_funcion proporcionado
    String sql = "SELECT asientos FROM funcion WHERE id_funcion = ?";

    // Asegúrate de que la conexión esté abierta y válida
    if (con == null) {
        JOptionPane.showMessageDialog(this, "Error: No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return asientos;
    }

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        // Establecer el parámetro de la consulta
        pst.setInt(1, idFuncion);  // Establecer el id_funcion

        // Ejecutar la consulta
        try (ResultSet rs = pst.executeQuery()) {
            // Si encontramos un resultado, obtenemos los asientos
            if (rs.next()) {
                asientos = rs.getInt("asientos");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró una función con el id proporcionado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener los asientos de la función: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    return asientos;  // Retorna el número de asientos o 0 si no se encuentra la función
}
public void insertarCliente(String nombreCliente, String apellidoCliente, int ciCliente) {
    // Consulta SQL para insertar un nuevo cliente
    String sql = "INSERT INTO cliente (nombre_cliente, apellido_cliente, ci_cliente) VALUES (?, ?, ?)";

    // Verificar que la conexión no sea nula
    if (con == null) {
        JOptionPane.showMessageDialog(null, "Error: No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        // Asignar valores a los parámetros de la consulta
        pst.setString(1, nombreCliente);
        pst.setString(2, apellidoCliente);
        pst.setInt(3, ciCliente);

        // Ejecutar la consulta
        int filasAfectadas = pst.executeUpdate();

        // Verificar si la inserción fue exitosa
        if (filasAfectadas > 0) {
            JOptionPane.showMessageDialog(null, "Cliente registrado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No se pudo registrar el cliente.", "Error", JOptionPane.ERROR_MESSAGE);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al registrar cliente: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

  public void reducirAsientos(int idFuncion, int cantidadReducir) {
   
    String sqlSelect = "SELECT asientos FROM funcion WHERE id_funcion = ?";

    String sqlUpdate = "UPDATE funcion SET asientos = ? WHERE id_funcion = ?";
    int asientosDisponibles = 0;

    try (PreparedStatement pstSelect = con.prepareStatement(sqlSelect)) {
        
        pstSelect.setInt(1, idFuncion);

        try (ResultSet rs = pstSelect.executeQuery()) {
            if (rs.next()) {
          
                asientosDisponibles = rs.getInt("asientos");
            } else {
               
                JOptionPane.showMessageDialog(this, "No se encontró una función con ese id.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        
        if (cantidadReducir > asientosDisponibles) {
          
            JOptionPane.showMessageDialog(this, "No se puede ocupar más asientos de los disponibles.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int nuevosAsientos = asientosDisponibles - cantidadReducir;

        try (PreparedStatement pstUpdate = con.prepareStatement(sqlUpdate)) {
            pstUpdate.setInt(1, nuevosAsientos);  // Establecer el nuevo número de asientos
            pstUpdate.setInt(2, idFuncion);       // Establecer el id_funcion

           
            int filasAfectadas = pstUpdate.executeUpdate();
            if (filasAfectadas > 0) {
              //  JOptionPane.showMessageDialog(this, "Se han ocuparon los asientos correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo actualizar la cantidad de asientos.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al reducir los asientos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


public void insertarImagenPorNombrePelicula(String nombrePelicula) {
    // Consulta SQL para obtener la imagen de la película especificada por el nombre
    String sql = "SELECT imagen FROM pelicula WHERE nombre_pelicula = ?";
    
    // Variable para almacenar la imagen
    byte[] imagenBytes = null;

    // Verificar que la conexión esté establecida
    if (con == null) {
        JOptionPane.showMessageDialog(this, "Error: No se pudo establecer conexión con la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        
        pst.setString(1, nombrePelicula); 


        try (ResultSet rs = pst.executeQuery()) {
            
            if (rs.next()) {
      
                imagenBytes = rs.getBytes("imagen");

                if (imagenBytes != null) {
                  
                    ImageIcon imageIcon = new ImageIcon(imagenBytes);
                    Image image = imageIcon.getImage(); // Obtener la imagen
                    Image resizedImage = image.getScaledInstance(paraFoto.getWidth(), paraFoto.getHeight(), Image.SCALE_SMOOTH); // Ajustar el tamaño
                    ImageIcon resizedIcon = new ImageIcon(resizedImage); 
                   
                    paraFoto.setIcon(resizedIcon);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontró una imagen para esta película.", "Aviso", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró una película con ese nombre.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener la imagen de la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}


     public int obtenerIdEmpleadoPorUsuario(String usuario) {
    int idEmpleado = -1; 
    String sql = "SELECT id_empleado FROM empleado WHERE usuario = ?";

    try (PreparedStatement pst = con.prepareStatement(sql)) {
        pst.setString(1, usuario);

        try (ResultSet rs = pst.executeQuery()) {
          
            if (rs.next()) {
                idEmpleado = rs.getInt("id_empleado");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró un empleado con el usuario proporcionado.", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al obtener el ID del empleado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }

    return idEmpleado; 
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPago.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptarBtn;
    private javax.swing.JPanel bg;
    private javax.swing.JButton cancelarBtn;
    private javax.swing.JLabel cerrarlbl;
    private javax.swing.JPanel guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel menu;
    private javax.swing.JTextField nAsientos;
    private javax.swing.JLabel paraAs;
    private javax.swing.JLabel paraAs1;
    private javax.swing.JLabel paraFoto;
    private javax.swing.JLabel paraHora;
    private javax.swing.JLabel paraPeli;
    private javax.swing.JLabel paraPeli1;
    private javax.swing.JPanel prece;
    // End of variables declaration//GEN-END:variables
}
