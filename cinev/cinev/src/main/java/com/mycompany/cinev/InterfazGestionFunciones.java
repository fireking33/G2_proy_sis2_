/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.cinev;

import java.awt.Color;

import java.awt.Image;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author fband
 */
public class InterfazGestionFunciones extends javax.swing.JFrame {
    
    int xMouse, yMouse;
    private String rutaImagen; 
    private Conexion conexion = new Conexion();
    Connection con = conexion.establecerConexion();
    private String nomSala;
    
    /**
     * Creates new form InterfazRegPeli
     */
    public InterfazGestionFunciones(String nomSala) {
        initComponents();
        this.setLocationRelativeTo(this);
        this.nomSala=nomSala;
        SetImageLabel(menulbl,"src/main/java/images/Menu75.png");
    
        cargarPeliculas(); // Llamar a la función para llenar el JComboBox de películas
    }
    
    // Método para recibir el nombre de la sala desde otra clase

    private void cargarPeliculas() {
    // Limpiar el JComboBox antes de llenarlo
    peliculasComboBox.removeAllItems();

    // Consulta SQL para obtener los nombres de las películas
    String sql = "SELECT nombre_pelicula FROM pelicula ORDER BY nombre_pelicula ASC";

    try (PreparedStatement stmt = con.prepareStatement(sql);
         ResultSet rs = stmt.executeQuery()) {

        // Verificar si hay películas en la BD
        if (!rs.isBeforeFirst()) {
            JOptionPane.showMessageDialog(this, "No hay películas registradas.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Llenar el JComboBox con los nombres de las películas
        while (rs.next()) {
            String nombrePelicula = rs.getString("nombre_pelicula");
            if (nombrePelicula != null && !nombrePelicula.trim().isEmpty()) {
                peliculasComboBox.addItem(nombrePelicula);
            }
        }

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar las películas: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        menu = new javax.swing.JPanel();
        menuF = new javax.swing.JPanel();
        menulbl = new javax.swing.JLabel();
        prece = new javax.swing.JPanel();
        guardar = new javax.swing.JPanel();
        cerrarlbl = new javax.swing.JLabel();
        peliculasComboBox = new javax.swing.JComboBox<>();
        subTituloFunciones = new javax.swing.JLabel();
        subtitulosPeliculas = new javax.swing.JLabel();
        horarioPanel = new javax.swing.JPanel();
        horarioTexto = new javax.swing.JTextField();
        subAnia = new javax.swing.JLabel();
        aniadirBtn = new javax.swing.JToggleButton();
        subAnia1 = new javax.swing.JLabel();
        funcionesParaModificarComboBox1 = new javax.swing.JComboBox<>();
        subtitulosPeliculas1 = new javax.swing.JLabel();
        buscarBtn = new javax.swing.JToggleButton();
        eliminarBtn = new javax.swing.JToggleButton();
        subtitulosPeliculas2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        nombrePelicula = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        numButacas = new javax.swing.JTextField();
        tituloGestion = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(11, 23, 128));
        setLocationByPlatform(true);
        setUndecorated(true);
        setResizable(false);

        bg.setBackground(new java.awt.Color(13, 20, 58));
        bg.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menu.setBackground(new java.awt.Color(102, 102, 255));
        menu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuF.setBackground(new java.awt.Color(102, 102, 255));
        menuF.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        menuF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                menuFMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                menuFMouseExited(evt);
            }
        });

        menulbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        menulbl.setForeground(new java.awt.Color(255, 255, 255));
        menulbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menulbl.setText("MENU");
        menulbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menulblMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout menuFLayout = new javax.swing.GroupLayout(menuF);
        menuF.setLayout(menuFLayout);
        menuFLayout.setHorizontalGroup(
            menuFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuFLayout.createSequentialGroup()
                .addComponent(menulbl, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        menuFLayout.setVerticalGroup(
            menuFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuFLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menulbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.add(menuF, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 40));

        bg.add(menu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 90, 60));

        prece.setBackground(new java.awt.Color(13, 20, 58));
        prece.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                preceMouseDragged(evt);
            }
        });
        prece.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                preceMousePressed(evt);
            }
        });

        guardar.setBackground(new java.awt.Color(102, 0, 102));
        guardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                guardarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                guardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                guardarMouseExited(evt);
            }
        });

        cerrarlbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        cerrarlbl.setForeground(new java.awt.Color(255, 255, 255));
        cerrarlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cerrarlbl.setText("x");

        javax.swing.GroupLayout guardarLayout = new javax.swing.GroupLayout(guardar);
        guardar.setLayout(guardarLayout);
        guardarLayout.setHorizontalGroup(
            guardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guardarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cerrarlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        guardarLayout.setVerticalGroup(
            guardarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, guardarLayout.createSequentialGroup()
                .addContainerGap(10, Short.MAX_VALUE)
                .addComponent(cerrarlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout preceLayout = new javax.swing.GroupLayout(prece);
        prece.setLayout(preceLayout);
        preceLayout.setHorizontalGroup(
            preceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preceLayout.createSequentialGroup()
                .addContainerGap(691, Short.MAX_VALUE)
                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        preceLayout.setVerticalGroup(
            preceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, preceLayout.createSequentialGroup()
                .addComponent(guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        bg.add(prece, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 730, -1));

        peliculasComboBox.setBackground(new java.awt.Color(102, 0, 102));
        peliculasComboBox.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        peliculasComboBox.setForeground(new java.awt.Color(255, 255, 255));
        peliculasComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peliculasComboBoxActionPerformed(evt);
            }
        });
        bg.add(peliculasComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 250, 200, 30));

        subTituloFunciones.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subTituloFunciones.setForeground(new java.awt.Color(255, 255, 255));
        subTituloFunciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subTituloFunciones.setText("Funcion:");
        bg.add(subTituloFunciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 200, 110, 40));

        subtitulosPeliculas.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subtitulosPeliculas.setForeground(new java.awt.Color(255, 255, 255));
        subtitulosPeliculas.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitulosPeliculas.setText("Buscar Pelicula:");
        bg.add(subtitulosPeliculas, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, 190, 40));

        horarioPanel.setBackground(new java.awt.Color(102, 0, 102));

        horarioTexto.setBackground(new java.awt.Color(102, 0, 102));
        horarioTexto.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        horarioTexto.setForeground(new java.awt.Color(153, 153, 153));
        horarioTexto.setText("HH:MM");
        horarioTexto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        horarioTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                horarioTextoMousePressed(evt);
            }
        });
        horarioTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horarioTextoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout horarioPanelLayout = new javax.swing.GroupLayout(horarioPanel);
        horarioPanel.setLayout(horarioPanelLayout);
        horarioPanelLayout.setHorizontalGroup(
            horarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(horarioPanelLayout.createSequentialGroup()
                .addComponent(horarioTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        horarioPanelLayout.setVerticalGroup(
            horarioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(horarioPanelLayout.createSequentialGroup()
                .addComponent(horarioTexto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        bg.add(horarioPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 250, 150, 30));

        subAnia.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subAnia.setForeground(new java.awt.Color(255, 255, 255));
        subAnia.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subAnia.setText("Añadir Peliculas a Funciones:");
        bg.add(subAnia, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, 340, 40));

        aniadirBtn.setBackground(new java.awt.Color(0, 255, 0));
        aniadirBtn.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        aniadirBtn.setText("AÑADIR+");
        aniadirBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        aniadirBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                aniadirBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                aniadirBtnMouseExited(evt);
            }
        });
        aniadirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aniadirBtnActionPerformed(evt);
            }
        });
        bg.add(aniadirBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 250, 160, 50));

        subAnia1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subAnia1.setForeground(new java.awt.Color(255, 255, 255));
        subAnia1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subAnia1.setText("Eliminar Pelicula:");
        bg.add(subAnia1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 210, 40));

        funcionesParaModificarComboBox1.setBackground(new java.awt.Color(102, 0, 102));
        funcionesParaModificarComboBox1.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        funcionesParaModificarComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        funcionesParaModificarComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                funcionesParaModificarComboBox1ActionPerformed(evt);
            }
        });
        bg.add(funcionesParaModificarComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 360, 200, 30));

        subtitulosPeliculas1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subtitulosPeliculas1.setForeground(new java.awt.Color(255, 255, 255));
        subtitulosPeliculas1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitulosPeliculas1.setText("Numero de Butacas:");
        bg.add(subtitulosPeliculas1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 240, 40));

        buscarBtn.setBackground(new java.awt.Color(0, 0, 255));
        buscarBtn.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        buscarBtn.setForeground(new java.awt.Color(255, 255, 255));
        buscarBtn.setText("BUSCAR");
        buscarBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buscarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buscarBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buscarBtnMouseExited(evt);
            }
        });
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });
        bg.add(buscarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 360, 160, 50));

        eliminarBtn.setBackground(new java.awt.Color(255, 0, 0));
        eliminarBtn.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        eliminarBtn.setForeground(java.awt.Color.white);
        eliminarBtn.setText("ELIMINAR");
        eliminarBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eliminarBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                eliminarBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                eliminarBtnMouseExited(evt);
            }
        });
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });
        bg.add(eliminarBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 360, 160, 50));

        subtitulosPeliculas2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        subtitulosPeliculas2.setForeground(new java.awt.Color(255, 255, 255));
        subtitulosPeliculas2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subtitulosPeliculas2.setText("Pelicula:");
        bg.add(subtitulosPeliculas2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 200, 110, 40));

        jPanel1.setBackground(new java.awt.Color(102, 0, 102));

        nombrePelicula.setBackground(new java.awt.Color(102, 0, 102));
        nombrePelicula.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        nombrePelicula.setForeground(new java.awt.Color(255, 255, 255));
        nombrePelicula.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        nombrePelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombrePeliculaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(nombrePelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(nombrePelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        bg.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 360, 200, 30));

        jPanel2.setBackground(new java.awt.Color(102, 0, 102));

        numButacas.setBackground(new java.awt.Color(102, 0, 102));
        numButacas.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        numButacas.setForeground(new java.awt.Color(255, 255, 255));
        numButacas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        numButacas.setCaretColor(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(numButacas, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(numButacas, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        bg.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        tituloGestion.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tituloGestion.setForeground(new java.awt.Color(255, 255, 255));
        tituloGestion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloGestion.setText("Gestion de Funciones");
        tituloGestion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        bg.add(tituloGestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 400, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void guardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseEntered
       guardar.setBackground(Color.red);
    }//GEN-LAST:event_guardarMouseEntered

    private void guardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseExited
        guardar.setBackground(new Color(102,0,102));
    }//GEN-LAST:event_guardarMouseExited

    private void preceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preceMousePressed
        xMouse=evt.getX();
        yMouse=evt.getY();
    }//GEN-LAST:event_preceMousePressed

    private void preceMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_preceMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        
        this.setLocation(x-xMouse,y-yMouse);
    }//GEN-LAST:event_preceMouseDragged

    private void guardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guardarMouseClicked

        System.exit(0);    }//GEN-LAST:event_guardarMouseClicked

    private void menuFMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuFMouseEntered
        menuF.setBackground(new Color(153,153,255));
    }//GEN-LAST:event_menuFMouseEntered

    private void menuFMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuFMouseExited
       menuF.setBackground(new Color(17,27,82));
    }//GEN-LAST:event_menuFMouseExited

    private void peliculasComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peliculasComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_peliculasComboBoxActionPerformed

    private void horarioTextoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_horarioTextoMousePressed
        if(horarioTexto.getText().equals("HH:MM")){
        horarioTexto.setText("");
       horarioTexto.setForeground(Color.white);
       }
    }//GEN-LAST:event_horarioTextoMousePressed

    private void aniadirBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aniadirBtnMouseEntered
        aniadirBtn.setBackground(Color.green);
    }//GEN-LAST:event_aniadirBtnMouseEntered

    private void aniadirBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aniadirBtnMouseExited
       
    }//GEN-LAST:event_aniadirBtnMouseExited

    private void aniadirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aniadirBtnActionPerformed
        agregarFuncion();
        
    }//GEN-LAST:event_aniadirBtnActionPerformed

     private void agregarFuncion() {
    // Obtener y validar el horario del JTextField
    String horario = horarioTexto.getText().trim();

    if (horario.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese un horario en formato HH:MM o HH:MM:SS.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Normalizar horario a HH:MM:SS si solo tiene HH:MM
    if (horario.matches("^\\d{2}:\\d{2}$")) {
        horario += ":00"; // Agregar segundos
    }

    // Validar formato HH:MM:SS
    if (!horario.matches("^\\d{2}:\\d{2}:\\d{2}$")) {
        JOptionPane.showMessageDialog(this, "El horario debe estar en formato HH:MM o HH:MM:SS.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar selección de película
    String nombrePelicula = (String) peliculasComboBox.getSelectedItem();
    if (nombrePelicula == null || nombrePelicula.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Seleccione una película.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Validar que la sala está seleccionada
    if (nomSala == null || nomSala.trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No se ha seleccionado una sala.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener y validar el número de butacas
    String numButacasText = numButacas.getText().trim();
    if (numButacasText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el número de butacas.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int numButacasInt;
    try {
        numButacasInt = Integer.parseInt(numButacasText);
        if (numButacasInt <= 0) {
            JOptionPane.showMessageDialog(this, "El número de butacas debe ser mayor que 0.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "El número de butacas debe ser un valor numérico válido.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Obtener id_sala
        int idSala = obtenerIdSala(nomSala);
        if (idSala == -1) {
            JOptionPane.showMessageDialog(this, "No se encontró la sala en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener id_pelicula
        int idPelicula = obtenerIdPelicula(nombrePelicula);
        if (idPelicula == -1) {
            JOptionPane.showMessageDialog(this, "No se encontró la película en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar si ya existe una función en esa sala y horario
        if (existeFuncionEnSala(idSala, horario)) {
            JOptionPane.showMessageDialog(this, "Ya existe una función en la " + nomSala + " a las " + horario, "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Insertar la nueva función si no hay conflicto
        String sqlInsert = "INSERT INTO funcion (id_sala, id_pelicula, fecha_hora_funcion, asientos) VALUES (?, ?, ?::TIME, ?) RETURNING id_funcion;";
        try (PreparedStatement stmtInsert = con.prepareStatement(sqlInsert)) {
            stmtInsert.setInt(1, idSala);
            stmtInsert.setInt(2, idPelicula);
            stmtInsert.setString(3, horario);
            stmtInsert.setInt(4, numButacasInt);

            ResultSet rsInsert = stmtInsert.executeQuery();
            if (rsInsert.next()) {
                int idFuncion = rsInsert.getInt("id_funcion");
                JOptionPane.showMessageDialog(this, "Función añadida con éxito ", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                horarioTexto.setText(""); // Limpiar campo
                numButacas.setText("");
            } else {
                JOptionPane.showMessageDialog(this, "Error al añadir la función.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error en PostgreSQL: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

        /**
     * Método auxiliar para obtener el ID de una tabla con base en un valor de columna.
     */
    private int obtenerId(String tabla, String idColumna, String nombreColumna, String valor) {
        String sql = "SELECT " + idColumna + " FROM " + tabla + " WHERE " + nombreColumna + " = ?";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, valor);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt(idColumna);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar en la tabla " + tabla + ": " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return -1; // Retorna -1 si no encuentra el ID
    }
    
    private int obtenerIdSala(String nombreSala) {
        String sql = "SELECT id_sala FROM sala WHERE nombre_sala = ?";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, nombreSala);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("id_sala");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar la sala: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return -1; // Si no se encuentra la sala
    }

    private int obtenerIdPelicula(String nombrePelicula) {
        String sql = "SELECT id_pelicula FROM pelicula WHERE nombre_pelicula = ?";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setString(1, nombrePelicula);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("id_pelicula");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al buscar la película: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return -1; // Si no se encuentra la película
    }

    private boolean existeFuncionEnSala(int idSala, String horario) {
        String sql = "SELECT COUNT(*) FROM funcion WHERE id_sala = ? AND fecha_hora_funcion = ?::TIME";
        try (PreparedStatement stmt = con.prepareStatement(sql)) {
            stmt.setInt(1, idSala);
            stmt.setString(2, horario);
            ResultSet rs = stmt.executeQuery();
            if (rs.next() && rs.getInt(1) > 0) {
                return true; // Ya existe una función en la misma sala y horario
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al verificar disponibilidad de la sala: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
 
    private void funcionesParaModificarComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_funcionesParaModificarComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_funcionesParaModificarComboBox1ActionPerformed

    private void buscarBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarBtnMouseEntered
        buscarBtn.setBackground(Color.blue);
    }//GEN-LAST:event_buscarBtnMouseEntered

    private void buscarBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buscarBtnMouseExited
       
    }//GEN-LAST:event_buscarBtnMouseExited

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        cargarHorariosDePelicula();
    }//GEN-LAST:event_buscarBtnActionPerformed

   private void cargarHorariosDePelicula() {
    // Obtener el nombre de la película desde el JTextField
    String peliculaSeleccionada = nombrePelicula.getText().trim();

    // Validar que el campo no esté vacío
    if (peliculaSeleccionada.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el nombre de una película.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Limpiar el JComboBox antes de llenarlo con nuevos horarios
    funcionesParaModificarComboBox1.removeAllItems();

    try {
        // Obtener el ID de la película basada en el nombre ingresado
        String sqlPelicula = "SELECT id_pelicula FROM pelicula WHERE nombre_pelicula = ?";
        PreparedStatement stmtPelicula = con.prepareStatement(sqlPelicula);
        stmtPelicula.setString(1, peliculaSeleccionada);
        ResultSet rsPelicula = stmtPelicula.executeQuery();

        int idPelicula = -1;
        if (rsPelicula.next()) {
            idPelicula = rsPelicula.getInt("id_pelicula");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la película en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        rsPelicula.close();
        stmtPelicula.close();

        // Consultar los horarios de la película y obtener solo HH:MM sin segundos
        String sqlHorarios = "SELECT TO_CHAR(fecha_hora_funcion, 'HH24:MI') AS hora_funcion " +
                             "FROM funcion WHERE id_pelicula = ? ORDER BY fecha_hora_funcion ASC";
        PreparedStatement stmtHorarios = con.prepareStatement(sqlHorarios);
        stmtHorarios.setInt(1, idPelicula);
        ResultSet rsHorarios = stmtHorarios.executeQuery();

        // Verificar si hay funciones registradas
        if (!rsHorarios.isBeforeFirst()) {
            JOptionPane.showMessageDialog(this, "No hay funciones registradas para esta película.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        // Agregar los horarios al JComboBox en formato HH:MM
        while (rsHorarios.next()) {
            String horarioFormateado = rsHorarios.getString("hora_funcion");
            funcionesParaModificarComboBox1.addItem(horarioFormateado);
        }

        // Cerrar recursos
        rsHorarios.close();
        stmtHorarios.close();

    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar funciones: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}
}
    
    private void eliminarBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarBtnMouseEntered
        eliminarBtn.setBackground(Color.red);
    }//GEN-LAST:event_eliminarBtnMouseEntered

    private void eliminarBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarBtnMouseExited
  
    }//GEN-LAST:event_eliminarBtnMouseExited

    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        eliminarFuncion();
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void eliminarFuncion() {
        // Obtener valores de los componentes
        String salaSeleccionada = nomSala;
        String peliculaSeleccionada = nombrePelicula.getText().trim();
        String horarioSeleccionado = (String) funcionesParaModificarComboBox1.getSelectedItem();

        // Validaciones previas
        if (salaSeleccionada == null || salaSeleccionada.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado una sala.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (peliculaSeleccionada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese el nombre de una película.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (horarioSeleccionado == null || horarioSeleccionado.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleccione un horario válido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Obtener el ID de la sala
            String sqlSala = "SELECT id_sala FROM sala WHERE nombre_sala = ?";
            PreparedStatement stmtSala = con.prepareStatement(sqlSala);
            stmtSala.setString(1, salaSeleccionada);
            ResultSet rsSala = stmtSala.executeQuery();

            int idSala = -1;
            if (rsSala.next()) {
                idSala = rsSala.getInt("id_sala");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la sala en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rsSala.close();
            stmtSala.close();

            // Obtener el ID de la película
            String sqlPelicula = "SELECT id_pelicula FROM pelicula WHERE nombre_pelicula = ?";
            PreparedStatement stmtPelicula = con.prepareStatement(sqlPelicula);
            stmtPelicula.setString(1, peliculaSeleccionada);
            ResultSet rsPelicula = stmtPelicula.executeQuery();

            int idPelicula = -1;
            if (rsPelicula.next()) {
                idPelicula = rsPelicula.getInt("id_pelicula");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la película en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rsPelicula.close();
            stmtPelicula.close();

            // Obtener el ID de la función
            String sqlFuncion = "SELECT id_funcion FROM funcion WHERE id_sala = ? AND id_pelicula = ? AND fecha_hora_funcion = ?::TIME";
            PreparedStatement stmtFuncion = con.prepareStatement(sqlFuncion);
            stmtFuncion.setInt(1, idSala);
            stmtFuncion.setInt(2, idPelicula);
            stmtFuncion.setString(3, horarioSeleccionado);
            ResultSet rsFuncion = stmtFuncion.executeQuery();

            int idFuncion = -1;
            if (rsFuncion.next()) {
                idFuncion = rsFuncion.getInt("id_funcion");
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró la función en la base de datos.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            rsFuncion.close();
            stmtFuncion.close();

            // Confirmar eliminación
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de que desea eliminar esta función?", "Confirmación", JOptionPane.YES_NO_OPTION);
            if (confirmacion != JOptionPane.YES_OPTION) {
                return;
            }

            // Eliminar la función de la BD
            String sqlEliminar = "DELETE FROM funcion WHERE id_funcion = ?";
            PreparedStatement stmtEliminar = con.prepareStatement(sqlEliminar);
            stmtEliminar.setInt(1, idFuncion);

            int filasAfectadas = stmtEliminar.executeUpdate();
            stmtEliminar.close();

            // Verificar si la eliminación fue exitosa
            if (filasAfectadas > 0) {
                JOptionPane.showMessageDialog(this, "Función eliminada con éxito.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                funcionesParaModificarComboBox1.removeItem(horarioSeleccionado); // Eliminar del JComboBox
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar la función.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error en PostgreSQL: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    private void horarioTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horarioTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horarioTextoActionPerformed

    private void nombrePeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombrePeliculaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombrePeliculaActionPerformed

    private void menulblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menulblMouseClicked
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazAdmin().setVisible(true);
            }
        });
        this.setVisible(false);
    }//GEN-LAST:event_menulblMouseClicked

      
     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazGestionFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazGestionFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazGestionFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazGestionFunciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
      
    }
    private void SetImageLabel(JLabel labelName, String root){
        
        ImageIcon image = new ImageIcon(root);
        Icon icon = new ImageIcon(
                image.getImage().getScaledInstance(labelName.getWidth(), labelName.getHeight(), Image.SCALE_DEFAULT));
        labelName.setIcon(icon);
        this.repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton aniadirBtn;
    private javax.swing.JPanel bg;
    private javax.swing.JToggleButton buscarBtn;
    private javax.swing.JLabel cerrarlbl;
    private javax.swing.JToggleButton eliminarBtn;
    private javax.swing.JComboBox<String> funcionesParaModificarComboBox1;
    private javax.swing.JPanel guardar;
    private javax.swing.JPanel horarioPanel;
    private javax.swing.JTextField horarioTexto;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel menu;
    private javax.swing.JPanel menuF;
    private javax.swing.JLabel menulbl;
    private javax.swing.JTextField nombrePelicula;
    private javax.swing.JTextField numButacas;
    private javax.swing.JComboBox<String> peliculasComboBox;
    private javax.swing.JPanel prece;
    private javax.swing.JLabel subAnia;
    private javax.swing.JLabel subAnia1;
    private javax.swing.JLabel subTituloFunciones;
    private javax.swing.JLabel subtitulosPeliculas;
    private javax.swing.JLabel subtitulosPeliculas1;
    private javax.swing.JLabel subtitulosPeliculas2;
    private javax.swing.JLabel tituloGestion;
    // End of variables declaration//GEN-END:variables
}
